version: "3.9"

services:
  kratos-migrate:
    image: oryd/kratos:v0.8.0-alpha.2-sqlite
    environment:
      - DSN=sqlite:///var/lib/sqlite/db.sqlite?_fk=true&mode=rwc
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - {LOCAL_VOLUME_KRATOS}/kratos.yml:/home/.kratos.yaml
    command: migrate sql -e --yes
    restart: on-failure
    networks:
      - default

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v0.8.0-alpha.2-sqlite
    restart: unless-stopped
    environment:
      - DSN=sqlite:///var/lib/sqlite/db.sqlite?_fk=true
      - LOG_LEVEL=trace
      - SERVE_PUBLIC_BASE_URL={BASE_URL}/.ory/kratos/public/
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    ports:
      - 4434:4434
    volumes:
      - {LOCAL_VOLUME_KRATOS}:/etc/config/kratos:Z
      - kratos-sqlite:/var/lib/sqlite
    networks:
      - default

  oathkeeper:
    image: oryd/oathkeeper:v0.38.15-beta.1
    depends_on:
      - kratos
    ports:
      - 4455:4455
    command: serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    environment:
      - LOG_LEVEL=debug
    restart: on-failure
    networks:
      - default
    volumes:
      - {LOCAL_VOLUME_OATHKEEPER}:/etc/config/oathkeeper:Z

  authorizer:
    image: ibiscp/authorizer:{AUTHORIZER}
    restart: always
    expose:
      - 80
    networks:
      - default

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - 1025:1025
      - 4436:8025
    networks:
      - default

  ui:
    # image: ibiscp/ui:{UI}
    build:
      # context: ../modules/refinery-ui/
      context: ../modules/front-react/
      dockerfile: Dockerfile
    restart: always
    ports:
      - 7050:80
    expose:
      - 80
    networks:
      - default

  entry:
    image: ibiscp/entry:{ENTRY}
    restart: always
    environment:    
      - IS_OS=1
    expose:
      - 80
    networks:
      - default

  postgres-migrate:
    depends_on:
      - graphql-postgres
    image: ibiscp/gateway:{GATEWAY}
    environment:
      - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
    command: alembic upgrade head
    networks:
      - default

  # gateway:
  #   image: ibiscp/gateway:{GATEWAY}
  #   depends_on:
  #     - config
  #   restart: always
  #   ports:
  #     - 7051:80
  #   expose:
  #     - 80
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:Z
  #     - graphql-sqlite:/sqlite
  #   environment:
  #     - AC_EXEC_ENV_IMAGE=ibiscp/ac-exec-env:{AC_EXEC_ENV}
  #     - LF_EXEC_ENV_IMAGE=ibiscp/lf-exec-env:{LF_EXEC_ENV}
  #     - ML_EXEC_ENV_IMAGE=ibiscp/ml-exec-env:{ML_EXEC_ENV}
  #     - RECORD_IDE_IMAGE=ibiscp/record-ide-env:{RECORD_IDE_ENV}
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - LF_NETWORK=refinery_default
  #     - WEAK_SUPERVISION={WEAK_SUPERVISOR_URL}
  #     - EMBEDDING_SERVICE={EMBEDDING_SERVICE_URL}
  #     - DOC_OCK={DOC_OCK_URL}
  #     - TOKENIZER={TOKENIZER_URL}
  #     - ZERO_SHOT={ZERO_SHOT_URL}
  #     - NEURAL_SEARCH={NEURAL_SEARCH_URL}
  #     - KRATOS_ADMIN_URL={KRATOS_ADMIN_URL}
  #     - WS_NOTIFY_ENDPOINT={WS_NOTIFY_ENDPOINT_URL}
  #     - UPDATER={UPDATER_URL}
  #     - CONFIG={CONFIG_URL}
  #     - S3_ENDPOINT={CRED_ENDPOINT}
  #     - S3_ENDPOINT_LOCAL={S3_ENDPOINT_LOCAL_URL}
  #     - S3_ACCESS_KEY={S3_ACCESS_KEY}
  #     - S3_SECRET_KEY={S3_SECRET_KEY}
  #     - SQLITE=/sqlite/db.sqlite
  #     # - TYPESENSE_SEARCH=http://typesense-api:80
  #   networks:
  #     - default

  graphql-postgres:
    image: docker.io/postgres:13
    restart: always
    ports:
      - 7052:5432
    environment:
      - POSTGRES_PASSWORD={POSTGRES_PASSWORD}
      - POSTGRES_USER={POSTGRES_USER}
    expose:
      - {POSTGRES_PORT}
    networks:
      - default
    volumes:
      - {LOCAL_VOLUME_POSTGRES}:/var/lib/postgresql/data
      
  # qdrant:
  #   image: qdrant/qdrant:v0.9.1
  #   restart: always
  #   ports:
  #     - 6333:6333
  #   expose:
  #     - 6333
  #   networks:
  #     - default
  #   volumes:
  #     - {LOCAL_VOLUME_QDRANT}:/qdrant/storage

  gateway-proxy:
    depends_on:
      - graphql-postgres
    image: ibiscp/gateway-proxy:{GATEWAY_PROXY}
    restart: always
    expose:
      - 80
    environment:
      - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@postgres:{POSTGRES_PORT}
      - GATEWAY={GATEWAY_URL}
      - KRATOS={KRATOS_URL}
      - CONFIG={CONFIG_URL}
    links:
      - "graphql-postgres:postgres"
    networks:
      - default

  object-storage:
    image: docker.io/minio/minio:latest
    restart: always
    ports:
      - 7053:9000
      - 9001:9001
    expose:
      - 9000
    environment:
      - MINIO_ROOT_USER={S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD={S3_SECRET_KEY}
      - MINIO_NOTIFY_WEBHOOK_ENABLE=on
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT={GATEWAY_URL}/notify
    command: server /data --address :9000 --console-address ":9001"
    networks:
      - default
    volumes:
      - {LOCAL_VOLUME_MINIO}:/data

  # weak-supervisor:
  #   image: ibiscp/weak-supervisor:{WEAK_SUPERVISOR}
  #   restart: unless-stopped
  #   ports:
  #     - 7054:80
  #   expose:
  #     - 80
  #   environment:
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - WS_NOTIFY_ENDPOINT={WS_NOTIFY_ENDPOINT_URL}
  #   networks:
  #     - default

  # embedder:
  #   image: ibiscp/embedder:{EMBEDDER}
  #   restart: unless-stopped
  #   ports:
  #     - 7058:80
  #   environment:
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - S3_ENDPOINT_LOCAL={S3_ENDPOINT_LOCAL_URL}
  #     - S3_ACCESS_KEY={S3_ACCESS_KEY}
  #     - S3_SECRET_KEY={S3_SECRET_KEY}
  #     - DOC_OCK={DOC_OCK_URL}
  #     - WS_NOTIFY_ENDPOINT={WS_NOTIFY_ENDPOINT_URL}
  #     - NEURAL_SEARCH={NEURAL_SEARCH_URL}
  #     - CONFIG={CONFIG_URL}
  #   expose:
  #     - 80
  #   networks:
  #     - default

  config:
    image: ibiscp/config:{CONFIG}
    restart: unless-stopped
    ports:
      - 7059:80
    environment:
      - IS_MANAGED=0
      - KERN_S3_ENDPOINT={KERN_S3_ENDPOINT_URL}
    expose:
      - 80
    networks:
      - default

  # doc-ock:
  #   depends_on:
  #     - config
  #   image: ibiscp/doc-ock:{DOC_OCK}
  #   restart: unless-stopped
  #   ports:
  #     - 7060:80
  #   expose:
  #     - 80
  #   environment:
  #     - CONFIG={CONFIG_URL}
  #   #   - TELEMETRY_URI=https://telemetry.kern.ai

  websocket:
    image: ibiscp/websocket:{WEBSOCKET}
    restart: unless-stopped
    environment:
      - DB_DSN=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}?sslmode=disable
    ports:
      - 7065:8080
    expose:
      - 8080
    networks:
      - default

  # tokenizer:
  #   depends_on:
  #     - config
  #   image: ibiscp/tokenizer:{TOKENIZER}
  #   restart: unless-stopped
  #   ports:
  #     - 7061:80
  #   environment:
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - S3_ENDPOINT_LOCAL={S3_ENDPOINT_LOCAL_URL}
  #     - S3_ACCESS_KEY={S3_ACCESS_KEY}
  #     - S3_SECRET_KEY={S3_SECRET_KEY}
  #     - DOC_OCK={DOC_OCK_URL}
  #     - WS_NOTIFY_ENDPOINT={WS_NOTIFY_ENDPOINT_URL}
  #     - CONFIG={CONFIG_URL}
  #   expose:
  #     - 80
  #   networks:
  #     - default

  # updater:
  #   image: ibiscp/updater:{UPDATER}
  #   restart: unless-stopped
  #   ports:
  #     - 7062:80
  #   environment:
  #     - NEURAL_SEARCH={NEURAL_SEARCH_URL}
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - S3_ENDPOINT_LOCAL={S3_ENDPOINT_LOCAL_URL}
  #     - S3_ACCESS_KEY={S3_ACCESS_KEY}
  #     - S3_SECRET_KEY={S3_SECRET_KEY}
  #   expose:
  #     - 80
  #   networks:
  #     - default

  # neural-search:
  #   image: ibiscp/neural-search:{NEURAL_SEARCH}
  #   restart: unless-stopped
  #   ports:
  #     - 7063:80
  #   environment:
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - QDRANT_PORT=6333
  #   expose:
  #     - 80
  #   networks:
  #     - default

  # zero-shot:
  #   image: ibiscp/zero-shot:{ZERO_SHOT}
  #   restart: unless-stopped
  #   ports:
  #     - 7064:80
  #   environment:
  #     - POSTGRES=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@graphql-postgres:{POSTGRES_PORT}
  #     - WS_NOTIFY_ENDPOINT={WS_NOTIFY_ENDPOINT_URL}
  #     - CONFIG={CONFIG_URL}
  #   expose:
  #     - 80
  #   networks:
  #     - default

networks:
  default:

volumes:
  kratos-sqlite:
  graphql-sqlite: